/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { execCmd, TestSession } from '@salesforce/cli-plugins-testkit';
import { Lifecycle, Messages, SandboxEvents, SandboxProcessObject, StatusEvent } from '@salesforce/core';
import { expect, assert, config } from 'chai';

config.truncateThreshold = 0;

Messages.importMessagesDirectory(__dirname);

describe('Sandbox Orgs', () => {
  let session: TestSession;
  let hubOrgUsername: string;

  before(async () => {
    session = await TestSession.create({
      project: { name: 'sandboxCreate' },
      devhubAuthStrategy: 'AUTO',
    });
    assert(session.hubOrg.username);
    hubOrgUsername = session.hubOrg.username;
  });

  it('will create a sandbox, verify it can be opened, and then attempt to delete it', async () => {
    let result: SandboxProcessObject | undefined;
    try {
      Lifecycle.getInstance().on(SandboxEvents.EVENT_STATUS, async (results: StatusEvent) => {
        // eslint-disable-next-line no-console
        console.log('sandbox copy progress', results.sandboxProcessObj.CopyProgress);
      });
      let rawResult = execCmd(
        `env:create:sandbox -a mySandbox -s -l Developer -o ${hubOrgUsername} --no-prompt --json --async`,
        { timeout: 3600000 }
      );
      result = rawResult.jsonOutput?.result as SandboxProcessObject;
      // autogenerated sandbox names start with 'sbx'
      expect(result).to.be.ok;
      expect(result.SandboxName.startsWith('sbx'), 'env:create:sandbox').to.be.true;
      rawResult = execCmd<SandboxProcessObject>(
        `env:resume:sandbox --name ${result.SandboxName} -o ${hubOrgUsername} -w 60 --json`,
        { timeout: 3600000 }
      );
      result = rawResult.jsonOutput?.result as SandboxProcessObject;
      expect(result).to.be.ok;
    } catch (e) {
      expect(false).to.be.true(JSON.stringify(e));
    }

    assert(result);
    const sandboxUsername = `${hubOrgUsername}.${result.SandboxName}`;
    // even if a DNS issue occurred, the sandbox should still be present and available.
    const openResult = execCmd<{ url: string }>('org:open -o mySandbox --url-only --json', {
      ensureExitCode: 0,
    }).jsonOutput?.result;
    assert(openResult, 'env:open');
    expect(openResult.url, 'env:open').to.ok;

    const deleteResult = execCmd<{ username: string }>('env:delete:sandbox --target-org mySandbox --no-prompt --json', {
      ensureExitCode: 0,
    }).jsonOutput?.result;
    assert(deleteResult, 'env:delete:sandbox');
    expect(deleteResult.username, 'env:delete:sandbox').to.equal(sandboxUsername);
  });

  after(async () => {
    try {
      await session?.clean();
    } catch (e) {
      // do nothing
    }
  });
});
